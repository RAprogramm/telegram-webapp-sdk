name: Reusable CI

on:
  workflow_call:
    inputs:
      all-features:
        type: boolean
        default: true

jobs:
  # üîß Setup
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      msrv: ${{ steps.msrv.outputs.msrv }}
    steps:
      - uses: actions/checkout@v5

      - name: Read MSRV from Cargo.toml
        id: msrv
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          RV=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].rust_version // empty')
          if [ -z "$RV" ]; then
            echo "rust-version is not set in Cargo.toml"
            exit 1
          fi
          [[ "$RV" =~ ^[0-9]+\.[0-9]+$ ]] && RV="${RV}.0"
          echo "msrv=${RV}" >> "$GITHUB_OUTPUT"
          echo "Using MSRV: $RV"

  # üìã Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install nightly rustfmt
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly-2025-08-01
          components: rustfmt

      - name: Check formatting
        run: cargo +nightly-2025-08-01 fmt --all -- --check

      - name: REUSE Compliance
        uses: fsfe/reuse-action@v5

  # üîç Linting
  clippy:
    name: Clippy (MSRV)
    runs-on: ubuntu-latest
    needs: setup
    env:
      CARGO_LOCKED: "true"
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.setup.outputs.msrv }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.setup.outputs.msrv }}
          components: clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run clippy
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.all-features }}" = "true" ]; then
            cargo +${{ needs.setup.outputs.msrv }} clippy --workspace --all-targets --all-features -- -D warnings
          else
            cargo +${{ needs.setup.outputs.msrv }} clippy --workspace --all-targets -- -D warnings
          fi

  # üß™ Tests
  test:
    name: Tests (MSRV)
    runs-on: ubuntu-latest
    needs: setup
    env:
      CARGO_LOCKED: "true"
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.setup.outputs.msrv }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.setup.outputs.msrv }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Verify lockfile is committed
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f Cargo.lock ]; then
            echo "CARGO_LOCKED=1 but Cargo.lock is missing. Commit it or drop CARGO_LOCKED."
            exit 1
          fi

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run tests
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.all-features }}" = "true" ]; then
            cargo +${{ needs.setup.outputs.msrv }} nextest run --workspace --all-features --no-fail-fast --profile ci
          else
            cargo +${{ needs.setup.outputs.msrv }} nextest run --workspace --no-fail-fast --profile ci
          fi

      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # üì¶ Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [setup, code-quality, clippy, test]
    env:
      CARGO_LOCKED: "true"
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.setup.outputs.msrv }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.setup.outputs.msrv }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"

      - name: Auto-commit changes
        if: always()
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git add .
          git commit -m "chore(readme): auto-refresh [skip ci]" || true

      - name: Ensure tree is clean
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet; then
            echo "Working tree is dirty:"
            git status --porcelain
            exit 1
          fi

      - name: Package (dry-run)
        run: cargo +${{ needs.setup.outputs.msrv }} package --locked

  # üìä Coverage
  coverage:
    name: Coverage (Native)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.setup.outputs.msrv }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.setup.outputs.msrv }}
          components: llvm-tools-preview

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Generate coverage
        shell: bash
        run: |
          set -euo pipefail
          cargo +${{ needs.setup.outputs.msrv }} llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
          verbose: true
          flags: native

