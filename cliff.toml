# git-cliff configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# Changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""

# Template for changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}
    {% endfor %}
{% endfor %}\n
"""

# Template for changelog footer
footer = """
<!-- generated by git-cliff -->
"""

# Remove the leading and trailing whitespace from the template
trim = true

[git]
# Parse commits based on https://www.conventionalcommits.org
conventional_commits = false
# Filter unconventional commits
filter_unconventional = false
# Split the commit message by pattern
split_commits = false

# Regex for preprocessing commit messages
commit_preprocessors = [
    # Transform "#123 type: description" to "type: description (#123)"
    { pattern = '^#(\d+)\s+(.+)$', replace = "${2} (#${1})" },
]

# Regex for parsing commit messages
commit_parsers = [
    { message = "^feat", group = "Added" },
    { message = "^add", group = "Added" },
    { message = "^fix", group = "Fixed" },
    { message = "^perf", group = "Changed" },
    { message = "^refactor", group = "Changed" },
    { message = "^docs", group = "Changed" },
    { message = "^test", group = "Changed" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore: bump version", skip = true },
    { message = "^Merge pull request", skip = true },
    { message = "^Merge branch", skip = true },
    { message = "^deps\\(", skip = true },
    { message = "^ci", skip = true },
    { body = ".*security", group = "Security" },
    { message = "^revert", group = "Reverted" },
]

# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# Filter out commits that match the specified patterns
filter_commits = false

# Glob pattern for matching git tags
tag_pattern = "v[0-9].*"

# Sort tags chronologically
date_order = false
sort_commits = "oldest"

# Link parsers for extracting external references
link_parsers = [
    { pattern = "\\(#(\\d+)\\)", href = "https://github.com/RAprogramm/telegram-webapp-sdk/issues/$1", text = "#$1" },
]
